[{"content":"\r\n\r\n# lyricParsing\r\n\r\n解析歌词\r\n使用canvas显示lrc歌词\r\n支持卡拉ok式(酷狗那种的lrc)歌词读取与显示\r\n\r\n\u003e 如果有什么疑问请在github里新开一个issues!\r\n\u003e 我的代码可能有些不规范XD 有修正请告诉我\r\n\r\n## 链接\r\n[演示](https://klxljun.github.io/lyricParsing/index.html)\r\n[源代码](https://github.com/KLXLjun/lyricParsing)\r\n\r\n\r\n## 使用方法\r\n~~这也写一个就是怕github太慢了~~\r\n\r\n先new一个\r\n```javascript\r\nvar lrPar = new lyricParsing({\r\n    //音频标签\r\n    audio:document.getElementById(\"audios\"),\r\n    //画布标签\r\n    canvas:document.getElementById('canvas'),\r\n    //音频链接\r\n    audiourl:\"在这填入音频链接\",\r\n    //歌词全局偏移值\r\n    offset:60,\r\n    //调试模式\r\n    debug:false,\r\n    //画布刷新时间(毫秒)\r\n    reftime:7,\r\n    //渲染字体\r\n    rander_font:\"32px Microsoft YaHei\"\r\n});\r\n```\r\n\r\n然后初始化\r\n```javascript\r\nlrPar.init(歌词字符串变量)\r\n```\r\n\r\n就能使用了\r\n其他的请看[index.html](https://klxljun.github.io/lyricParsing/index.html)源码","cover":"https://hygitshare.oss-cn-chengdu.aliyuncs.com/picture/Snipaste_2020-06-04_19-58-43.png","link":"2020/lyricparsing.html","preview":"\u003cp\u003elyricParsing - 歌词解析与显示\u003c/p\u003e\n","title":"lyricParsing - 歌词解析与显示"},{"content":"\r\n\r\n话不多说直接上代码\r\n\r\n## 代码示例\r\n\r\n### HTML\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml\u003e\r\n\t\u003chead\u003e\r\n\t\t\u003cmeta charset=\"utf-8\"\u003e\r\n\t\t\u003ctitle\u003e\u003c/title\u003e\r\n\t\u003c/head\u003e\r\n\t\u003cbody\u003e\r\n\t\t\u003caudio controls=\"true\" src=\"忘川风华录,海伊,诗岸 - 青鸟衔风.mp3\"\u003e\u003c/audio\u003e\r\n\t\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### Javascipt\r\n```javascript\r\n//创建API\r\nvar audioCtx = new(window.AudioContext || window.webkitAudioContext)();\r\n//标签链接至API (audio标签或是video标签)\r\nvar source = audioCtx.createMediaElementSource(document.querySelector(\"audio\"))\r\n//链接到输出\r\nsource.connect(audioCtx.destination);\r\n```\r\n\r\n\r\n### 演示 [查看源码](/WebAudioAPI/start.html)\r\n\u003ciframe src=\"/WebAudioAPI/start.html\" style=\"width: 100%;border: 1px solid rgba(1,1,1,0.15);\"\u003e\u003c/iframe\u003e","cover":"/images/example.png","link":"2020/web-audio-api-start.html","preview":"\u003cp\u003e在网页中使用Audio API - 开始使用\u003c/p\u003e\n","title":"在网页中使用Audio API - 开始使用"},{"content":"\r\n\r\nOscillator 节点可以用于生成指定频率的某一种波形(例如正弦波或者方波什么的)\r\n\r\n## 参数\r\n-----\r\n\u003e type\r\n\u003e 类型是字符串 \r\n\r\n决定 OscillatorNode 播放的声音的周期波形,不同的波形可以产生不同的声调.\r\n基础值有 \"sine\"(正弦波),\"square\"(方波),\"sawtooth\"(锯齿波), \"triangle\"(三角波) 与 \"custom\"(自定义). 默认值是\"sine\"(正弦波)。\r\n\r\n\u003e frequency.value\r\n\u003e 类型是整数\r\n\r\n代表了声音的振动频率(单位为赫兹). 默认值是 440 Hz (中A音高).\r\n\r\n\u003e frequency.value\r\n\u003e 类型是整数\r\n\r\n代表了音高微调(单位是音分),默认值是0.\r\n\r\n\r\n## 代码示例\r\n\r\n### HTML\r\n```html\r\n\u003c!DOCTYPE html\u003e\r\n\u003chtml\u003e\r\n\t\u003chead\u003e\r\n\t\t\u003cmeta charset=\"utf-8\"\u003e\r\n\t\t\u003ctitle\u003e\u003c/title\u003e\r\n\t\u003c/head\u003e\r\n\t\u003cbody\u003e\r\n\t\t\u003cinput type=\"text\" value=\"440\" id=\"Hz\"\u003e\r\n\t\t\u003cselect id=\"type\"\u003e\r\n\t\t\t\u003coption selected=\"selected\" value=\"sine\"\u003e正弦波\u003c/option\u003e\r\n\t\t\t\u003coption value=\"square\"\u003e方波\u003c/option\u003e\r\n\t\t\t\u003coption value=\"sawtooth\"\u003e锯齿波\u003c/option\u003e\r\n\t\t\t\u003coption value=\"triangle\"\u003e三角波\u003c/option\u003e\r\n\t\t\u003c/select\u003e\r\n\t\t\u003cbutton id=\"play\"\u003e播放\u003c/button\u003e\r\n\t\t\u003cbutton id=\"pause\"\u003e暂停\u003c/button\u003e\r\n\t\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\n### JavaScript\r\n```javascript\r\n//创建API\r\nvar audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\nvar oscillator = audioCtx.createOscillator();\r\n\r\noscillator.type = 'square';                 //波形的形状\r\noscillator.frequency.value = 440;           //频率\r\noscillator.connect(audioCtx.destination);   //连接输出\r\noscillator.start();                         //播放\r\naudioCtx.suspend();                         //暂停播放api\r\n\r\n//绑定播放按钮的单击事件\r\ndocument.getElementById('play').addEventListener('click',function(e){\r\n    //暂停播放\r\n    audioCtx.suspend();\r\n\r\n    //获取下拉选择的波形\r\n    oscillator.type = document.querySelectorAll('#type option')[document.getElementById('type').selectedIndex].value || 'sine';\r\n\r\n    //频率\r\n    oscillator.frequency.value = parseInt(document.getElementById('Hz').value);\r\n\r\n    //继续播放\r\n    audioCtx.resume();\r\n});\r\n\r\n//绑定暂停按钮的单击事件\r\ndocument.getElementById('pause').addEventListener('click',function(e){\r\n    audioCtx.suspend();\r\n});\r\n```\r\n\r\n\r\n### 演示 [查看源码](/WebAudioAPI/Oscillator.html)\r\n\u003ciframe src=\"/WebAudioAPI/Oscillator.html\" style=\"width: 100%;border: 1px solid rgba(1,1,1,0.15);\"\u003e\u003c/iframe\u003e","cover":"/images/example.png","link":"2020/web-audio-api-oscillator.html","preview":"\u003cp\u003e在网页中使用Audio API - 生成指定频率的波形\u003c/p\u003e\n","title":"在网页中使用Audio API - 生成指定频率的波形"},{"content":"\r\n\u003e 如果需要更详细说明的可以去 [AudioContext - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext) 毕竟我写的这些都是我自己理解\r\n\r\n\u003e 目录在最下面 需要的可以从目录里的链接跳转\r\n\r\n这次怎么说呢,以前的时候写过一篇关于网页播放器中使用Audio API,但是感觉写的太烂了,现在想重写一个 XD\r\n\r\n\u003e   Web Audio API使用户可以在音频上下文(AudioContext)中进行音频操作，具有模块化路由的特点。在音频节点上操作进行基础的音频， 它们连接在一起构成音频路由图。即使在单个上下文中也支持多源，尽管这些音频源具有多种不同类型通道布局。这种模块化设计提供了灵活创建动态效果的复合音频的方法。  \r\n--取自 MDN\r\n\r\n也就是说 我们就可以以节点的形式来通过Audio API来处理音频数据  \r\n\r\n## 目录\r\n- [开始使用](/2020/web-audio-api-start.html)\r\n- [生成指定频率的波形](/2020/web-audio-api-Oscillator.html)\r\n- 滤波器 (简单的滤波器)\r\n- 混响效果 (线性卷积)\r\n- 延迟输出\r\n- 音频压缩 (压缩音频音量较高的部分避免发生削波和失真)\r\n- 音量调整 (音量大小)\r\n- 音量增益\r\n- 音频平衡 (音频偏左或偏右)\r\n- 失真效果 (非线性的畸变器)\r\n- 分离和合并通道 (左右声道的操作)\r\n- 音频分析与音频可视化\r\n- 声音空间效果\r\n\r\n之后会一个一个写完的,这个目录里的都会变蓝的 \\_(:з」∠)_","cover":"/images/example.png","link":"2020/web-audio-api-directory.html","preview":"\u003cp\u003e在网页中使用Audio API - 目录\u003c/p\u003e\n","title":"在网页中使用Audio API - 目录"},{"content":"\r\n\r\n![截图](https://cdn.jsdelivr.net/gh/KLXLjun/blogcdn@1.0.1/img/images/2020/02/20200218152152.png)\r\n\r\n\r\n## 源码链接\r\n[GitHub](https://github.com/KLXLjun/PixivDL) [Gitee](https://gitee.com/KLXLjun/PixivDL)\r\n\r\n## 简述\r\n- 使用Python3 \r\n- 仅仅只是单线程的下载 (需要代理)\r\n- 支持 url 或是 id 下载\r\n\r\n## 例如:\r\nurl下载:\r\n```shell\r\npython ajaxPixiv.py url https://www.pixiv.net/artworks/76811597\r\n```\r\nid下载:\r\n```shell\r\npython ajaxPixiv.py id 76811597\r\n```","cover":"https://cdn.jsdelivr.net/gh/KLXLjun/blogcdn@1.0.1/img/images/2020/02/20200218152152.png","link":"2020/pixiv-dl-1.html","preview":"\u003cp\u003ePixiv单线程图片下载\u003c/p\u003e\n","title":"Pixiv单线程图片下载"},{"content":"\r\n## 在网页播放器使用audioAPI\r\n\r\n\r\n\r\n\u003e 可以使用谷歌浏览器书签功能实现执行js代码(当然你也可以是用其他方法执行js代码)\r\n\r\n看你要获取的是视频的还是音频的标签\r\n\r\n如果不能确定或者是没有id的标签:\r\n\r\n```javascript\r\n视频:var audio1=document.getElementsByTagName(\"video\")[0]\r\n音频:var audio1=document.getElementsByTagName(\"audio\")[0]\r\n```\r\n\r\n~~ 差不多吧\r\n\r\n然后创建audioAPI的家伙吧\r\n\r\n`var audioctx = new (window.AudioContext || window.webkitAudioContext)();`\r\n\r\n创建混响和基本的:\r\n```javascript\r\nvar reverb = audioctx.createConvolver();\r\nvar source = audioctx.createMediaElementSource(audio1);\r\nvar gain=audioctx.createGain();\r\n```\r\n\r\n连接:\r\n\r\n```javascript\r\nsource.connect(reverb);\r\nsource.connect(gain);\r\nreverb.connect(audioctx.destination);\r\ngain.connect(audioctx.destination);`\r\n```\r\n\r\n参数:\r\n\r\n`gain.gain.value=0.6;`\r\n\r\n\r\n可以试着在混响里载入脉冲样本啦!\r\n```javascript\r\nvar soundSource, concertHallBuffer;\r\n\r\najaxRequest = new XMLHttpRequest();\r\najaxRequest.open('GET', '脉冲样本的文件链接', true);\r\najaxRequest.responseType = 'arraybuffer';\r\n\r\najaxRequest.onload = function() {\r\n\tvar audioData = ajaxRequest.response;\r\n\taudioctx.decodeAudioData(audioData, function(buffer) {\r\n\t\tconcertHallBuffer = buffer;\r\n\t\tsoundSource = audioctx.createBufferSource();\r\n\t\tsoundSource.buffer = concertHallBuffer;\r\n\t\treverb.buffer = concertHallBuffer;\r\n\t\tconsole.log(\"成功载入混响样本!\");\r\n\t},function(e){console.log(\"错误!无法解码音频数据 错误为:\" + e.err)});\r\n};\r\najaxRequest.send();\r\n```\r\n\r\n这样就差不多啦!\r\n","cover":"/images/example.png","link":"2019/webaudio.html","preview":"\u003cp\u003e在网页播放器使用audioAPI\u003c/p\u003e\n","title":"在网页播放器使用audioAPI"},{"content":"\n\n## 纸小墨简介\n\n纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\n\n![纸小墨 - 简洁的静态博客构建工具](/images/example.png)\n\n### 开始上手\n\n- 下载并解压 [Ink](http://www.chole.io/)，运行命令 `ink preview`\n\n  \u003e 注意：Linux/macOS下，使用 `./ink preview`\n\n- 使用浏览器访问 `http://localhost:8000` 预览。\n\n### 特性介绍\n- YAML格式的配置\n- Markdown格式的文章\n- 无依赖跨平台\n- 超快的构建速度\n- 不断改善的主题与排版\n- 多文章作者支持\n- 归档与标签自动生成\n- 保存时实时预览页面\n- 离线的全文关键字搜索\n\n### 配置网站\n编辑`config.yml`，使用如下格式：\n\n``` yaml\nsite:\n    title: 网站标题\n    subtitle: 网站子标题\n    limit: 每页可显示的文章数目\n    theme: 网站主题目录\n    comment: 评论插件变量(默认为Disqus账户名)\n    root: 网站根路径 #可选\n    lang: 网站语言 #支持en, zh, ru, ja，可在theme/config.yml配置\n    url: 网站链接 #用于RSS生成\n    link: 文章链接形式 #默认为{title}.html，支持{year},{month},{day},{title}变量\n\nauthors:\n    作者ID:\n        name: 作者名称\n        intro: 作者简介\n        avatar: 作者头像路径\n\nbuild:\n    output: 构建输出目录 #可选, 默认为 \"public\"\n    port: 预览端口\n    copy:\n        - 构建时将会复制的目录/文件\n    publish: |\n        ink publish 命令将会执行的脚本\n```\n\n### 创建文章\n在`source`目录中建立任意`.md`文件（可置于子文件夹），使用如下格式：\n\n``` yaml\ntitle: 文章标题\ndate: 年-月-日 时:分:秒 #创建时间，可加时区如\" +0800\"\nupdate: 年-月-日 时:分:秒 #更新时间，可选，可加时区如\" +0800\"\nauthor: 作者ID\ncover: 题图链接 #可选\ndraft: false #草稿，可选\ntop: false #置顶文章，可选\npreview: 文章预览，也可在正文中使用\u003c!--more--\u003e分割 #可选\ntags: #可选\n    - 标签1\n    - 标签2\ntype: post #指定类型为文章(post)或页面(page)，可选\nhide: false #隐藏文章，只可通过链接访问，可选\n\n---\n\nMarkdown格式的正文\n```\n\n### 发布博客\n- 在博客目录下运行`ink publish`命令自动构建博客并发布。\n- 或运行`ink build`命令将生成的`public`目录下的内容手动部署。\n\n\u003e Tips: 在使用`ink preview`命令时，编辑保存文件后，博客会自动重新构建并刷新浏览器页面。\n\n## 定制支持\n\n### 修改主题\n\n默认主题在`theme`目录下，修改源代码后在该目录下运行`npm install`与`npm run build`重新构建。\n\n页面包含`page.html`（文章列表）及`article.html`（文章）等，所有页面均支持[GO语言HTML模板](http://golang.org/pkg/html/template/)语法，可引用变量。\n\n### 添加页面\n\n在`source`目录下创建的任意`.html`文件将被复制，这些文件中可引用`config.yml`中site字段下的所有变量。\n\n### 博客迁移(Beta)\n\n纸小墨提供简单的Jeklly/Hexo博客文章格式转换，使用命令：\n``` shell\nink convert /path/_posts\n```\n\n### 源码编译\n\n本地运行\n\n1. 配置[GO](http://golang.org/doc/install)语言环境。\n2. 运行命令`go get github.com/InkProject/ink`，编译并获取ink。\n3. 运行命令`ink preview $GOPATH/src/github.com/InkProject/ink/template`，预览博客。\n\nDocker构建（示例）\n\n1. Clone源码 `git clone git@github.com:InkProject/ink.git`。\n2. 源码目录下构建镜像`docker build -t ink .`。\n3. 运行容器`docker run -p 8000:80 ink`。\n\n## 主题\n\n- Dark(Official Theme): [https://github.com/InkProject/ink-theme-dark](https://github.com/InkProject/ink-theme-dark)\n- simple: [https://github.com/myiq/ink-simple](https://github.com/myiq/ink-simple)\n\n## 相关链接\n\n- [InkPaper 最佳实践](https://segmentfault.com/a/1190000009084954)\n\n## 反馈贡献\n\n纸小墨基于 [CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/) 协议，目前为止它仍然是个非成熟的开源项目，非常欢迎任何人的任何贡献。如有问题可报告至 [https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)。\n\n## 更新历史\n\n- [2016-07-11] 修复诸多Issue与合并一些PR。\n- [2015-08-15] 一些Bug修复，新增RSS订阅支持，主题改善。\n- [2015-07-04] 数项Bug修复与主题改善，支持置顶，多语言，子模板。\n- [2015-06-04] 编译更多平台版本，增加标签与存档页。\n- [2015-03-01] Beta版本，基础功能完成。\n\n## 更新计划\n\n- 排版深度优化\n- 纸小墨编辑器\n\n## 正在使用\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/images/example.png","link":"2015/ink-blog-tool.html","preview":"\u003cp\u003e纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。\u003c/p\u003e\n","title":"简洁的静态博客构建工具 —— 纸小墨（InkPaper）"},{"content":"\n\n## Introduce\n\nInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\n\n![InkPaper - An Elegant Static Blog Generator](/images/example-en.png)\n\n### Quick Start\n- Download \u0026 Extract [Ink](http://www.chole.io/)，Run `ink preview`\n\n  \u003e Tips：Linux/macOS, use `./ink preview`\n\n- Open `http://localhost:8000` in browser to preview\n\n### Website Configuration\nEdit `config.yml`, use format:\n\n``` yaml\nsite:\n    title: Website Title\n    subtitle: Website Subtitle\n    limit: Max Article Count Per Page\n    theme: Website Theme Directory\n    comment: Comment Plugin Variable (Default is disqus username)\n    root: Website Root Path #Optional\n    lang: Website Language #Support en, zh, ru, ja, Configurable in theme/lang.yml\n    url: Website URL #For RSS Generating\n    link: Article Link Scheme #Default Is {title}.html，Support {year},{month},{day},{title} Variables\n\nauthors:\n    AuthorID:\n        name: Author Name\n        intro: Author Motto\n        avatar: Author Avatar Path\n\nbuild:\n    output: Build Output Directory #Optional, Default is \"public\"\n    port: Preview Port\n    copy:\n        - Copied Files When Build\n    publish: |\n        Excuted command when use 'ink publish'\n```\n\n### Writing\nCreate any `.md` file in `source` directory (Support subdirectory), use format:\n\n``` yaml\ntitle: Article Title\ndate: Year-Month-Day Hour:Minute:Second #Created Time，Support TimeZone, such as \" +0800\"\nupdate: Year-Month-Day Hour:Minute:Second #Updated Time，Optional，Support TimeZone, such as \" +0800\"\nauthor: AuthorID\ncover: Article Cover Path #Optional\ndraft: false #If Draft，Optional\ntop: false #Place article to top, Optional\npreview: Article Preview，Also use \u003c!--more--\u003e to split in body #Optional\ntags: #Optional\n    - Tag1\n    - Tag2\ntype: post #Specify type is post or page, Optional\nhide: false #Hide article，can be accessed via URL, Optional\n\n---\n\nMarkdown Format's Body\n```\n\n### Publish\n- Run `ink publish` in blog directory to automatically build and publish\n- Or run `ink build` to manually deploy generated `public` directory\n\n\u003e **Tips**: When files changed，`ink preview` will automatically rebuild blog，refresh browser to update.\n\n## Customization\n\n### Modify Theme\n\nDefault theme placed in `theme` folder, run `npm install` and `npm run build` to rebuild in this folder.\n\npage `page.html` (article list) and `article.html` (article), use variable with [Golang Template](http://golang.org/pkg/html/template/) syntax.\n\n### New Page\n\nCreated any `.html` file will be copied to `source` directory, could use all variables on `site` field in `config.yml`.\n\n### Blog Migrate (Beta)\n\nSupport simple Jeklly/Hexo post convert, use:\n\n``` shell\nink convert /path/_posts\n```\n\n### Build from source\n\nLocal Build\n\n1. Install [Golang](http://golang.org/doc/install) environment\n2. Run `go get github.com/InkProject/ink`, compile and get ink\n3. Run `ink preview $GOPATH/src/github.com/InkProject/ink/template`, preview blog\n\nDocker Build (Example)\n\n1. Clone code `git clone git@github.com:InkProject/ink.git`\n2. Build image `docker build -t ink .` in source directory\n3. Run container `docker run -p 8888:80 ink`\n\n## Theme\n\n- Dark(Official Theme): [https://github.com/InkProject/ink-theme-dark](https://github.com/InkProject/ink-theme-dark)\n- simple: [https://github.com/myiq/ink-simple](https://github.com/myiq/ink-simple)\n\n## Related Toturials\n\n- [Automatically deploy your Ink blog to GitHub pages wiht Travis CI](http://www.shery.me/blog/travis-ci.html)\n\n## Issue Report\n\n[CC Attribution-NonCommercial License 4.0](https://creativecommons.org/licenses/by-nc/4.0/)\n\n[https://github.com/InkProject/ink/issues](https://github.com/InkProject/ink/issues)\n\n## Change Log\n\n- [2016-07-11] Fix bugs and merge many PRs\n- [2015-08-15] Bug fix, support RSS feed, improve theme\n- [2015-07-04] Bug fix, improve theme, support top, i18n, subtemplate\n- [2015-06-04] Build more platform, add archive and tag page\n- [2015-03-01] Release first beta version\n\n## Develop Plan\n\n- Improve Theme\n- InkPaper Editor\n\n## They are using\n\n- [http://www.chole.io/blog/](http://www.chole.io/blog/)\n- [http://blog.hyper.sh/](http://blog.hyper.sh/)\n- [http://wangxu.me/](http://wangxu.me/)\n- [http://whzecomjm.com/](http://whzecomjm.com/)\n- [http://www.shery.me/blog/](http://www.shery.me/blog/)\n","cover":"/images/example-en.png","link":"2015/ink-blog-tool-en.html","preview":"\u003cp\u003eInkPaper is an static blog generator developed by Golang, No dependencies, Cross platform, Easy use, Fast build, Elegant theme.\u003c/p\u003e\n","title":"An Elegant Static Blog Generator —— InkPaper"}]